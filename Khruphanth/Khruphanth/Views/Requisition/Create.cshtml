@model Khruphanth.Models.T_Requisition

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid ">
    <!-- Start Page Content -->
    <div class="row ">
        <div class="col-lg-12">
            <div class="card card-outline-primary">
                <div class="card" style="background-color:rgb(253, 142, 10)">
                    <h4 class="m-b-0 text-white" style="word-spacing:30px;">บันทึกใบเบิกครุภัณฑ์ วิทยาการคอมพิวเตอร์</h4>
                </div>
                <div class="card-body">
                    <div class="form-body">
                        @using (Html.BeginForm("Create", "Requisition", FormMethod.Post, new { @class = "needs-validation", @id = "myForm1", @ovalidate = "" }))
                        {
                            @Html.AntiForgeryToken()

                            <div class="form-horizontal">

                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                <div class="row p-t-20">
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.RequisitionID, htmlAttributes: new { @class = "control-label col-md-10" })

                                            @Html.EditorFor(model => model.RequisitionID, new { htmlAttributes = new { @class = "form-control  input-rounded font", @required = "", @type = "number" } })
                                            @Html.ValidationMessageFor(model => model.RequisitionID, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-4">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Re_TeaId, null, htmlAttributes: new { @class = "control-label col-md-3" })
                                            @Html.DropDownList("Re_TeaId", null, "-กรุณาเลือกผู้เบิก-", htmlAttributes: new { @class = "form-control input-rounded form-DD2 font", @required = "" })
                                            <div class="invalid-feedback"> กรุณาเลือกผู้เบิก </div>
                                        </div>
                                    </div>

                                    @{DateTime date = new DateTime();
                                        string str = date.Day + "/" + date.Month + "/" + date.Year;
                                        <div class="col-md-2">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Re_DateRequi, htmlAttributes: new { @class = "control-label col-md-10" })

                                                @Html.EditorFor(model => model.Re_DateRequi, new { htmlAttributes = new { @class = "form-control input-rounded font", @readonly = "readonly", @Value = str = DateTime.Now.ToString("dd/MM/yyyy") } })
                                                @Html.ValidationMessageFor(model => model.Re_DateRequi, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="form-group">
                                    <button type="submit" class="btn-outline btn btn-success font"> <i class="fa fa-check"></i> Save</button>

                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">

        //$('#list').addInputArea({});
        (function () {
            debugger
            'use strict';
            window.addEventListener('load', function () {
                // Fetch all the forms we want to apply custom Bootstrap validation styles to
                var forms = document.getElementsByClassName('needs-validation');
                // Loop over them and prevent submission
                var validation = Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');

                    }, false);
                });
            },
                false);
        })();

    </script>
    <script>
    function CallChangfunc(val) {

        window.location.href ="@Url.Action("Create", "Requisition")?R_TeaId="+val;
    }
    </script>
}
